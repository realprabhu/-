const { cmd } = require('../command');
const fg = require('api-dylux'); // Import api-dylux for API requests
const yts = require('yt-search'); // Import yt-search for YouTube search
const fs = require('fs'); // File System module for renaming

// üé∂--------SONG-DOWNLOAD COMMAND-------//
cmd({
    pattern: "song",
    alias: ["ytmp3", "splay"],
    desc: "Download songs from YouTube",
    category: "download",
    filename: __filename
},
async (conn, mek, m, { from, quoted, q, reply }) => {
    try {
        if (!q) return reply("*üö´ Please provide a valid song name or YouTube URL... üé∂*");

        console.log("User Query:", q);

        // React with üîç and show searching text
        await conn.sendMessage(from, { react: { text: "üîç", key: mek.key } });
        reply("*üîé Searching for your song... Please wait!*");

        // Make the API request to download the song
        const response = await fg.get(`https://api.example.com/download?url=${encodeURIComponent(q)}`); // Replace with your API endpoint
        
        if (response.success) {
            const { title, audio_url, thumbnail, duration, views, likes, upload_date } = response;

            // Prepare the song details
            const desc = `*‚≠ê -S·¥è…¥…¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä- ‚≠ê*

> Íú±·¥á…¥·¥Ö…™…¥…¢ ·¥ç·¥è Ä·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üÍú± Íú∞·¥è Ä  è·¥è·¥ú Ä Íú±·¥è…¥…¢... üé∂

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úë
‚óâ‚îÇ üéµ *T…™·¥õ ü·¥á*: ${title}
‚óâ‚îÇ ‚è±Ô∏è *D·¥ú Ä·¥Ä·¥õ…™·¥è…¥*: ${duration}
‚óâ‚îÇ üîî *V…™·¥á·¥°Íú±*: ${views}
‚óâ‚îÇ üëç *L…™·¥ã·¥áÍú±*: ${likes}
‚óâ‚îÇ üìÖ *U·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö O…¥*: ${upload_date}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úë

*üéß E…¥·¥ä·¥è è Y·¥è·¥ú Ä S·¥è…¥…¢!*

> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Ôº∑ ú…™Íú±·¥ò·¥á Ä ·¥π·¥∞üßö‚Äç‚ôÄÔ∏è`;

            // Send the song thumbnail and details
            await conn.sendMessage(from, { image: { url: thumbnail }, caption: desc }, { quoted: mek });

            // React with üì• and show downloading text
            await conn.sendMessage(from, { react: { text: "üì•", key: mek.key } });
            reply("*üì• Downloading your song... Please wait!*");

            // Temporarily download the audio file to rename it
            const tempFilePath = './temp_audio.mp3';
            const renamedFilePath = './Ôº£ ú·¥Ä Ä·¥ú·¥ã·¥Ä ·µÄ·¥πüßö‚Äç‚ôÄÔ∏è.mp3';

            // Download the audio file
            const axios = require('axios');
            const writer = fs.createWriteStream(tempFilePath);
            const download = await axios({
                method: 'get',
                url: audio_url,
                responseType: 'stream',
            });
            download.data.pipe(writer);

            writer.on('finish', async () => {
                // Rename the downloaded file
                fs.renameSync(tempFilePath, renamedFilePath);

                // Send the renamed file
                await conn.sendMessage(from, {
                    audio: { url: renamedFilePath }, // Use the renamed file
                    mimetype: 'audio/mp3',
                    caption: `üé∂ *${title}*`
                }, { quoted: mek });

                // Delete the renamed file after sending
                fs.unlinkSync(renamedFilePath);

                // React with ‚úÖ when upload is complete
                await conn.sendMessage(from, { react: { text: "‚úÖ", key: mek.key } });
                reply("*‚úÖ Song upload completed. Enjoy!*");
            });

            writer.on('error', (error) => {
                console.log("Download Error:", error);
                reply("*‚ùå Failed to download the song. Please try again later.*");
            });

        } else {
            reply("*‚ùå Failed to fetch the song. Please try again later.*");
        }

    } catch (e) {
        console.log("Error:", e);
        reply(`*‚ùå Error: ${e.message ? e.message : "Something went wrong!"}*`);
    }
});
